"""
Django settings for pgoops project.

Generated by 'django-admin startproject' using Django 3.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import datetime
import os
from pathlib import Path

from kombu import Exchange, Queue

BASE_DIR = Path(__file__).resolve().parent.parent

from common.config_dispose import ConfigDispose

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kt)1(r2inw-0t=n2d%0xrg3fx4&1*8^@!46fei2cdl)l)(+g(r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ConfigDispose.get_bool_val('pgoops', 'debug')

# 防止黑客入侵
ALLOWED_HOSTS = ConfigDispose.get_default('allowed_hosts', 'list')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 内置app
    'apps.pgo_user.apps.PgoUserConfig',
    'apps.pgo_permission.apps.PgoPermissionConfig',
    'apps.pgo_data_map.apps.PgoDataMapConfig',
    'apps.pgo_service_tree.apps.PgoServiceTreeConfig',
    'apps.pgo_iac.apps.PgoIacConfig',
    'apps.pgo_message_center.apps.PgoMessageCenterConfig',
    # 第三方
    'channels',
    "rest_framework",
    "rest_framework_jwt",
    "django_filters",
    'corsheaders',
    'django_celery_beat',

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 跨域添加响应头
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'pgoops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'pgoops.wsgi.application'
ASGI_APPLICATION = 'pgoops.asgi.application'
# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"
TIME_ZONE = "Asia/Shanghai"
APPEND_SLASH = False
USE_I18N = True
USE_L10N = True
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = ConfigDispose.get_default('static_url')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS组的配置信息
# 默认全不允许不是用白名单
CORS_ORIGIN_ALLOW_ALL = True
# 授权进行跨站点HTTP请求的来源列表。默认为[]
CORS_ORIGIN_WHITELIST = (
    "http://127.0.0.1:8080",
    "http://152.136.192.185:8080",
    "http://152.136.192.185:8000",
    "http://152.136.192.185:9000",
    "http://152.136.192.185:80",
    "http://172.21.16.16:8080",
    "http://demo.superops.top:8080",
    "http://demo.superops.top:8000",
    "http://demo.superops.top:9000",
    "http://demo.superops.top:80",
    "http://demo.superops.top",
)
# 正则匹配白名单
CORS_ORIGIN_REGEX_WHITELIST = [
    # r"^https://\w+\.example\.com$",
]

# 是否允许ajax跨域请求时携带cookie，False表示不用，我们后面也用不到cookie，所以关掉它就可以了，以防有人通过cookie来搞我们的网站
CORS_ALLOW_CREDENTIALS = False
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "XMLHttpRequest",
    "X_FILENAME",
    "Pragma",
]

REST_FRAMEWORK = {
    # 自定义异常
    "EXCEPTION_HANDLER": "common.exception.custom_exception_handler",
    # 验证
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
        "common.verify.ApiRBACPermission",
    ),
    # JWT 全局认证
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.AutoSchema",
    # 自定义分页
    "DEFAULT_PAGINATION_CLASS": "common.pagination.StandardResultSetPagination",
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
    "DATETIME_FORMAT": "%Y-%m-%d %H:%M:%S",
}
JWT_AUTH = {
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
    "JWT_EXPIRATION_DELTA": datetime.timedelta(seconds=ConfigDispose.get_default('jwt_expiration_delta', 'int')),
    "JWT_REFRESH_EXPIRATION_DELTA": datetime.timedelta(days=1),
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'common.jwt_json_web_token.jwt_response_payload_handler',
}


# 注意此处不要写成列表或元组的形式
MEDIA_ROOT = ConfigDispose.get_default('media_root')
IAC_WORK_DIR = ConfigDispose.get_default('iac_work_dir')
# 配置 MEDIA_URL 作为公用 URL，指向上传文件的基本路径
MEDIA_URL = "/media/"
AUTH_USER_MODEL = "pgo_user.UserProfile"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": ConfigDispose.get_mysql('name'),
        "HOST": ConfigDispose.get_mysql('host'),
        "PORT": ConfigDispose.get_mysql('port'),
        "USER": ConfigDispose.get_mysql('user'),
        "PASSWORD": ConfigDispose.get_mysql('password'),
        "OPTIONS": ConfigDispose.get_mysql('options'),
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f'redis://{ConfigDispose.get_redis("host")}:{ConfigDispose.get_redis("port")}/0',
        "TIMEOUT": 60 * 60 * 24,
        "OPTIONS": {
            # 自动将byte转成字符串
            "DECODE_RESPONSES": True,
            "PASSWORD": f'{ConfigDispose.get_redis("password")}',
            # 连接池配置
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # 开启压缩，默认不开始
            "COMPRESSOR": "django_redis.compressors.lzma.LzmaCompressor",
        },
        "KEY_PREFIX": 'pgoops' + ":django",
    },
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [f'redis://:{ConfigDispose.get_redis("password")}@{ConfigDispose.get_redis("host")}:{ConfigDispose.get_redis("port")}/1'],
        },
    },
}
# celery
CELERY_BROKER_URL = f'redis://:{ConfigDispose.get_redis("password")}@{ConfigDispose.get_redis("host")}:{ConfigDispose.get_redis("port")}/2'
CELERY_CACHE_BACKEND = 'django-cache'
CELERYD_MAX_TASKS_PER_CHILD = 20  # 每个 worker 最多执行3个任务就会被销毁，可防止内存泄露
CELERY_RESULT_BACKEND = f'redis://:{ConfigDispose.get_redis("password")}@{ConfigDispose.get_redis("host")}:{ConfigDispose.get_redis("port")}/2'
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = "Asia/Shanghai"
CELERY_ENABLE_UTC = False
DJANGO_CELERY_BEAT_TZ_AWARE = False
CELERY_DEFAULT_QUEUE = 'default'  # 设置默认的路由
CELERY_DEFAULT_EXCHANGE = 'default'
CELERY_DEFAULT_ROUTING_KEY = 'default'
# CELERY_TASK_ROUTES = {'iac.tasks.*'USE_TZ: {"queue": "iac-1"}}
CELERY_TASK_QUEUES = (
    Queue("default", Exchange("default"), routing_key="default"),  # 默认队列
    # 定义队列feed_tasks,从交换接口:default接收，并且过滤路由的key,主要演示手动路由的机制
    Queue("iac_task_queue", Exchange("compute_node"), routing_key="iac_task"),  # 定义队列:add_queue,绑定交换机:compute_node
    Queue("iac_message_queue", Exchange("compute_node"), routing_key="message_task"),
    # 定义队列:add_queue,绑定交换机:compute_node
    Queue("add_queue", Exchange("compute_node"), routing_key="mul_task"),  # 定义队列:mul_queue,绑定交换机:compute_node
)
CELERY_TASK_ROUTES = {
    'apps.pgo_iac.tasks.*': {"queue": "iac_task_queue", 'routing_key': 'iac_task'},
    'apps.pgo_message_center.tasks.*': {"queue": "iac_message_queue", 'routing_key': 'message_task'}
}
# celery -A django_celery_project worker -P eventlet -l info -n celery


# celery -A pgoops worker -l info -n pgoops_celery_worker@%h


# celery -A pgoops beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
